"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Review!]
  _reviewsMeta(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use reviewsCount instead."
    )
  reviewsCount(where: ReviewWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Order!]
  _ordersMeta(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ordersCount instead."
    )
  ordersCount(where: OrderWhereInput! = {}): Int
  profile_image: ImageFieldOutput
  notifications(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Notification!]
  _notificationsMeta(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use notificationsCount instead."
    )
  notificationsCount(where: NotificationWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput

  """
   condition must be true for all nodes
  """
  reviews_every: ReviewWhereInput

  """
   condition must be true for at least 1 node
  """
  reviews_some: ReviewWhereInput

  """
   condition must be false for all nodes
  """
  reviews_none: ReviewWhereInput

  """
   condition must be true for all nodes
  """
  orders_every: OrderWhereInput

  """
   condition must be true for at least 1 node
  """
  orders_some: OrderWhereInput

  """
   condition must be false for all nodes
  """
  orders_none: OrderWhereInput

  """
   condition must be true for all nodes
  """
  notifications_every: NotificationWhereInput

  """
   condition must be true for at least 1 node
  """
  notifications_some: NotificationWhereInput

  """
   condition must be false for all nodes
  """
  notifications_none: NotificationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
  reviews: ReviewRelateToManyInput
  orders: OrderRelateToManyInput
  profile_image: ImageFieldInput
  notifications: NotificationRelateToManyInput
}

input PostRelateToManyInput {
  create: [PostCreateInput]
  connect: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  disconnectAll: Boolean
}

input ReviewRelateToManyInput {
  create: [ReviewCreateInput]
  connect: [ReviewWhereUniqueInput]
  disconnect: [ReviewWhereUniqueInput]
  disconnectAll: Boolean
}

input OrderRelateToManyInput {
  create: [OrderCreateInput]
  connect: [OrderWhereUniqueInput]
  disconnect: [OrderWhereUniqueInput]
  disconnectAll: Boolean
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input NotificationRelateToManyInput {
  create: [NotificationCreateInput]
  connect: [NotificationWhereUniqueInput]
  disconnect: [NotificationWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
  reviews: ReviewRelateToManyInput
  orders: OrderRelateToManyInput
  profile_image: ImageFieldInput
  notifications: NotificationRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean
}

input PostWhereUniqueInput {
  id: ID
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
}

input PostsCreateInput {
  data: PostCreateInput
}

"""
 A keystone list
"""
type Product {
  id: ID!
  title: String
  description: String
  price: String
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  status: String
  quantitiy: Int
  manufacturer: Manufacturer
  products_orderd: Int
  reviews(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Review!]
  _reviewsMeta(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use reviewsCount instead."
    )
  reviewsCount(where: ReviewWhereInput! = {}): Int
  image: ImageFieldOutput
  is_discounted: String
  discount(
    where: DiscountWhereInput! = {}
    search: String
    sortBy: [SortDiscountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [DiscountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Discount!]
  _discountMeta(
    where: DiscountWhereInput! = {}
    search: String
    sortBy: [SortDiscountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [DiscountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use discountCount instead."
    )
  discountCount(where: DiscountWhereInput! = {}): Int
  is_taxed: String
  tax(
    where: TaxWhereInput! = {}
    search: String
    sortBy: [SortTaxesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaxOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tax!]
  _taxMeta(
    where: TaxWhereInput! = {}
    search: String
    sortBy: [SortTaxesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaxOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use taxCount instead."
    )
  taxCount(where: TaxWhereInput! = {}): Int
  rating: Int
  category: Category
  tags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]
  _tagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  price: String
  price_not: String
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  quantitiy: Int
  quantitiy_not: Int
  quantitiy_lt: Int
  quantitiy_lte: Int
  quantitiy_gt: Int
  quantitiy_gte: Int
  quantitiy_in: [Int]
  quantitiy_not_in: [Int]
  manufacturer: ManufacturerWhereInput
  manufacturer_is_null: Boolean
  products_orderd: Int
  products_orderd_not: Int
  products_orderd_lt: Int
  products_orderd_lte: Int
  products_orderd_gt: Int
  products_orderd_gte: Int
  products_orderd_in: [Int]
  products_orderd_not_in: [Int]

  """
   condition must be true for all nodes
  """
  reviews_every: ReviewWhereInput

  """
   condition must be true for at least 1 node
  """
  reviews_some: ReviewWhereInput

  """
   condition must be false for all nodes
  """
  reviews_none: ReviewWhereInput
  is_discounted: String
  is_discounted_not: String
  is_discounted_contains: String
  is_discounted_not_contains: String
  is_discounted_starts_with: String
  is_discounted_not_starts_with: String
  is_discounted_ends_with: String
  is_discounted_not_ends_with: String
  is_discounted_i: String
  is_discounted_not_i: String
  is_discounted_contains_i: String
  is_discounted_not_contains_i: String
  is_discounted_starts_with_i: String
  is_discounted_not_starts_with_i: String
  is_discounted_ends_with_i: String
  is_discounted_not_ends_with_i: String
  is_discounted_in: [String]
  is_discounted_not_in: [String]

  """
   condition must be true for all nodes
  """
  discount_every: DiscountWhereInput

  """
   condition must be true for at least 1 node
  """
  discount_some: DiscountWhereInput

  """
   condition must be false for all nodes
  """
  discount_none: DiscountWhereInput
  is_taxed: String
  is_taxed_not: String
  is_taxed_contains: String
  is_taxed_not_contains: String
  is_taxed_starts_with: String
  is_taxed_not_starts_with: String
  is_taxed_ends_with: String
  is_taxed_not_ends_with: String
  is_taxed_i: String
  is_taxed_not_i: String
  is_taxed_contains_i: String
  is_taxed_not_contains_i: String
  is_taxed_starts_with_i: String
  is_taxed_not_starts_with_i: String
  is_taxed_ends_with_i: String
  is_taxed_not_ends_with_i: String
  is_taxed_in: [String]
  is_taxed_not_in: [String]

  """
   condition must be true for all nodes
  """
  tax_every: TaxWhereInput

  """
   condition must be true for at least 1 node
  """
  tax_some: TaxWhereInput

  """
   condition must be false for all nodes
  """
  tax_none: TaxWhereInput
  rating: Int
  rating_not: Int
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  rating_in: [Int]
  rating_not_in: [Int]
  category: CategoryWhereInput
  category_is_null: Boolean

  """
   condition must be true for all nodes
  """
  tags_every: TagWhereInput

  """
   condition must be true for at least 1 node
  """
  tags_some: TagWhereInput

  """
   condition must be false for all nodes
  """
  tags_none: TagWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

enum SortProductsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  status_ASC
  status_DESC
  quantitiy_ASC
  quantitiy_DESC
  products_orderd_ASC
  products_orderd_DESC
  is_discounted_ASC
  is_discounted_DESC
  is_taxed_ASC
  is_taxed_DESC
  rating_ASC
  rating_DESC
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  price: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  status: OrderDirection
  quantitiy: OrderDirection
  products_orderd: OrderDirection
  is_discounted: OrderDirection
  is_taxed: OrderDirection
  rating: OrderDirection
}

input ProductUpdateInput {
  title: String
  description: String
  price: String
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  status: String
  quantitiy: Int
  manufacturer: ManufacturerRelateToOneInput
  products_orderd: Int
  reviews: ReviewRelateToManyInput
  image: ImageFieldInput
  is_discounted: String
  discount: DiscountRelateToManyInput
  is_taxed: String
  tax: TaxRelateToManyInput
  rating: Int
  category: CategoryRelateToOneInput
  tags: TagRelateToManyInput
}

input ManufacturerRelateToOneInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
  disconnect: ManufacturerWhereUniqueInput
  disconnectAll: Boolean
}

input DiscountRelateToManyInput {
  create: [DiscountCreateInput]
  connect: [DiscountWhereUniqueInput]
  disconnect: [DiscountWhereUniqueInput]
  disconnectAll: Boolean
}

input TaxRelateToManyInput {
  create: [TaxCreateInput]
  connect: [TaxWhereUniqueInput]
  disconnect: [TaxWhereUniqueInput]
  disconnectAll: Boolean
}

input CategoryRelateToOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: CategoryWhereUniqueInput
  disconnectAll: Boolean
}

input TagRelateToManyInput {
  create: [TagCreateInput]
  connect: [TagWhereUniqueInput]
  disconnect: [TagWhereUniqueInput]
  disconnectAll: Boolean
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  title: String
  description: String
  price: String
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  status: String
  quantitiy: Int
  manufacturer: ManufacturerRelateToOneInput
  products_orderd: Int
  reviews: ReviewRelateToManyInput
  image: ImageFieldInput
  is_discounted: String
  discount: DiscountRelateToManyInput
  is_taxed: String
  tax: TaxRelateToManyInput
  rating: Int
  category: CategoryRelateToOneInput
  tags: TagRelateToManyInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

"""
 A keystone list
"""
type Tag {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  name: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  products_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  products_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  products_none: ProductWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

enum SortTagsBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  name_ASC
  name_DESC
}

input TagOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  name: String
  products: ProductRelateToManyInput
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

input TagsUpdateInput {
  id: ID!
  data: TagUpdateInput
}

input TagCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  name: String
  products: ProductRelateToManyInput
}

input TagsCreateInput {
  data: TagCreateInput
}

"""
 A keystone list
"""
type Review {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  review_text: String
  product: Product
  customer: User
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  review_text: String
  review_text_not: String
  review_text_contains: String
  review_text_not_contains: String
  review_text_starts_with: String
  review_text_not_starts_with: String
  review_text_ends_with: String
  review_text_not_ends_with: String
  review_text_i: String
  review_text_not_i: String
  review_text_contains_i: String
  review_text_not_contains_i: String
  review_text_starts_with_i: String
  review_text_not_starts_with_i: String
  review_text_ends_with_i: String
  review_text_not_ends_with_i: String
  review_text_in: [String]
  review_text_not_in: [String]
  product: ProductWhereInput
  product_is_null: Boolean
  customer: UserWhereInput
  customer_is_null: Boolean
}

input ReviewWhereUniqueInput {
  id: ID
}

enum SortReviewsBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  review_text_ASC
  review_text_DESC
}

input ReviewOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  review_text: OrderDirection
}

input ReviewUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  review_text: String
  product: ProductRelateToOneInput
  customer: UserRelateToOneInput
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

input ReviewsUpdateInput {
  id: ID!
  data: ReviewUpdateInput
}

input ReviewCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  review_text: String
  product: ProductRelateToOneInput
  customer: UserRelateToOneInput
}

input ReviewsCreateInput {
  data: ReviewCreateInput
}

"""
 A keystone list
"""
type Manufacturer {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  image: ImageFieldOutput
  name: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  products_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  products_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  products_none: ProductWhereInput
}

input ManufacturerWhereUniqueInput {
  id: ID
}

enum SortManufacturersBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  name_ASC
  name_DESC
}

input ManufacturerOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  name: OrderDirection
}

input ManufacturerUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  image: ImageFieldInput
  name: String
  products: ProductRelateToManyInput
}

input ManufacturersUpdateInput {
  id: ID!
  data: ManufacturerUpdateInput
}

input ManufacturerCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  image: ImageFieldInput
  name: String
  products: ProductRelateToManyInput
}

input ManufacturersCreateInput {
  data: ManufacturerCreateInput
}

"""
 A keystone list
"""
type Order {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  order_total: Float
  billing_postcode: String
  billing_city: String
  billing_country: String
  delivery_street_address: String
  delivery_name: String
  currency: String
  payment_method: String
  status: String
  customer: User
  orders_product(
    where: OrdersProductWhereInput! = {}
    search: String
    sortBy: [SortOrdersProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrdersProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [OrdersProduct!]
  _orders_productMeta(
    where: OrdersProductWhereInput! = {}
    search: String
    sortBy: [SortOrdersProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrdersProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use orders_productCount instead."
    )
  orders_productCount(where: OrdersProductWhereInput! = {}): Int
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  order_total: Float
  order_total_not: Float
  order_total_lt: Float
  order_total_lte: Float
  order_total_gt: Float
  order_total_gte: Float
  order_total_in: [Float]
  order_total_not_in: [Float]
  billing_postcode: String
  billing_postcode_not: String
  billing_postcode_contains: String
  billing_postcode_not_contains: String
  billing_postcode_starts_with: String
  billing_postcode_not_starts_with: String
  billing_postcode_ends_with: String
  billing_postcode_not_ends_with: String
  billing_postcode_i: String
  billing_postcode_not_i: String
  billing_postcode_contains_i: String
  billing_postcode_not_contains_i: String
  billing_postcode_starts_with_i: String
  billing_postcode_not_starts_with_i: String
  billing_postcode_ends_with_i: String
  billing_postcode_not_ends_with_i: String
  billing_postcode_in: [String]
  billing_postcode_not_in: [String]
  billing_city: String
  billing_city_not: String
  billing_city_contains: String
  billing_city_not_contains: String
  billing_city_starts_with: String
  billing_city_not_starts_with: String
  billing_city_ends_with: String
  billing_city_not_ends_with: String
  billing_city_i: String
  billing_city_not_i: String
  billing_city_contains_i: String
  billing_city_not_contains_i: String
  billing_city_starts_with_i: String
  billing_city_not_starts_with_i: String
  billing_city_ends_with_i: String
  billing_city_not_ends_with_i: String
  billing_city_in: [String]
  billing_city_not_in: [String]
  billing_country: String
  billing_country_not: String
  billing_country_contains: String
  billing_country_not_contains: String
  billing_country_starts_with: String
  billing_country_not_starts_with: String
  billing_country_ends_with: String
  billing_country_not_ends_with: String
  billing_country_i: String
  billing_country_not_i: String
  billing_country_contains_i: String
  billing_country_not_contains_i: String
  billing_country_starts_with_i: String
  billing_country_not_starts_with_i: String
  billing_country_ends_with_i: String
  billing_country_not_ends_with_i: String
  billing_country_in: [String]
  billing_country_not_in: [String]
  delivery_street_address: String
  delivery_street_address_not: String
  delivery_street_address_contains: String
  delivery_street_address_not_contains: String
  delivery_street_address_starts_with: String
  delivery_street_address_not_starts_with: String
  delivery_street_address_ends_with: String
  delivery_street_address_not_ends_with: String
  delivery_street_address_i: String
  delivery_street_address_not_i: String
  delivery_street_address_contains_i: String
  delivery_street_address_not_contains_i: String
  delivery_street_address_starts_with_i: String
  delivery_street_address_not_starts_with_i: String
  delivery_street_address_ends_with_i: String
  delivery_street_address_not_ends_with_i: String
  delivery_street_address_in: [String]
  delivery_street_address_not_in: [String]
  delivery_name: String
  delivery_name_not: String
  delivery_name_contains: String
  delivery_name_not_contains: String
  delivery_name_starts_with: String
  delivery_name_not_starts_with: String
  delivery_name_ends_with: String
  delivery_name_not_ends_with: String
  delivery_name_i: String
  delivery_name_not_i: String
  delivery_name_contains_i: String
  delivery_name_not_contains_i: String
  delivery_name_starts_with_i: String
  delivery_name_not_starts_with_i: String
  delivery_name_ends_with_i: String
  delivery_name_not_ends_with_i: String
  delivery_name_in: [String]
  delivery_name_not_in: [String]
  currency: String
  currency_not: String
  currency_contains: String
  currency_not_contains: String
  currency_starts_with: String
  currency_not_starts_with: String
  currency_ends_with: String
  currency_not_ends_with: String
  currency_i: String
  currency_not_i: String
  currency_contains_i: String
  currency_not_contains_i: String
  currency_starts_with_i: String
  currency_not_starts_with_i: String
  currency_ends_with_i: String
  currency_not_ends_with_i: String
  currency_in: [String]
  currency_not_in: [String]
  payment_method: String
  payment_method_not: String
  payment_method_in: [String]
  payment_method_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  customer: UserWhereInput
  customer_is_null: Boolean

  """
   condition must be true for all nodes
  """
  orders_product_every: OrdersProductWhereInput

  """
   condition must be true for at least 1 node
  """
  orders_product_some: OrdersProductWhereInput

  """
   condition must be false for all nodes
  """
  orders_product_none: OrdersProductWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  order_total_ASC
  order_total_DESC
  billing_postcode_ASC
  billing_postcode_DESC
  billing_city_ASC
  billing_city_DESC
  billing_country_ASC
  billing_country_DESC
  delivery_street_address_ASC
  delivery_street_address_DESC
  delivery_name_ASC
  delivery_name_DESC
  currency_ASC
  currency_DESC
  payment_method_ASC
  payment_method_DESC
  status_ASC
  status_DESC
}

input OrderOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  order_total: OrderDirection
  billing_postcode: OrderDirection
  billing_city: OrderDirection
  billing_country: OrderDirection
  delivery_street_address: OrderDirection
  delivery_name: OrderDirection
  currency: OrderDirection
  payment_method: OrderDirection
  status: OrderDirection
}

input OrderUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  order_total: Float
  billing_postcode: String
  billing_city: String
  billing_country: String
  delivery_street_address: String
  delivery_name: String
  currency: String
  payment_method: String
  status: String
  customer: UserRelateToOneInput
  orders_product: OrdersProductRelateToManyInput
}

input OrdersProductRelateToManyInput {
  create: [OrdersProductCreateInput]
  connect: [OrdersProductWhereUniqueInput]
  disconnect: [OrdersProductWhereUniqueInput]
  disconnectAll: Boolean
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

input OrderCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  order_total: Float
  billing_postcode: String
  billing_city: String
  billing_country: String
  delivery_street_address: String
  delivery_name: String
  currency: String
  payment_method: String
  status: String
  customer: UserRelateToOneInput
  orders_product: OrdersProductRelateToManyInput
}

input OrdersCreateInput {
  data: OrderCreateInput
}

"""
 A keystone list
"""
type OrdersProduct {
  id: ID!
  product_title: String
  product_quantity: Int
  product_price: String
  products_tax: String
  products_final_price: String
}

input OrdersProductWhereInput {
  AND: [OrdersProductWhereInput!]
  OR: [OrdersProductWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  product_title: String
  product_title_not: String
  product_title_contains: String
  product_title_not_contains: String
  product_title_starts_with: String
  product_title_not_starts_with: String
  product_title_ends_with: String
  product_title_not_ends_with: String
  product_title_i: String
  product_title_not_i: String
  product_title_contains_i: String
  product_title_not_contains_i: String
  product_title_starts_with_i: String
  product_title_not_starts_with_i: String
  product_title_ends_with_i: String
  product_title_not_ends_with_i: String
  product_title_in: [String]
  product_title_not_in: [String]
  product_quantity: Int
  product_quantity_not: Int
  product_quantity_lt: Int
  product_quantity_lte: Int
  product_quantity_gt: Int
  product_quantity_gte: Int
  product_quantity_in: [Int]
  product_quantity_not_in: [Int]
  product_price: String
  product_price_not: String
  product_price_lt: String
  product_price_lte: String
  product_price_gt: String
  product_price_gte: String
  products_tax: String
  products_tax_not: String
  products_tax_lt: String
  products_tax_lte: String
  products_tax_gt: String
  products_tax_gte: String
  products_final_price: String
  products_final_price_not: String
  products_final_price_lt: String
  products_final_price_lte: String
  products_final_price_gt: String
  products_final_price_gte: String
}

input OrdersProductWhereUniqueInput {
  id: ID
}

enum SortOrdersProductsBy {
  id_ASC
  id_DESC
  product_title_ASC
  product_title_DESC
  product_quantity_ASC
  product_quantity_DESC
  product_price_ASC
  product_price_DESC
  products_tax_ASC
  products_tax_DESC
  products_final_price_ASC
  products_final_price_DESC
}

input OrdersProductOrderByInput {
  id: OrderDirection
  product_title: OrderDirection
  product_quantity: OrderDirection
  product_price: OrderDirection
  products_tax: OrderDirection
  products_final_price: OrderDirection
}

input OrdersProductUpdateInput {
  product_title: String
  product_quantity: Int
  product_price: String
  products_tax: String
  products_final_price: String
}

input OrdersProductsUpdateInput {
  id: ID!
  data: OrdersProductUpdateInput
}

input OrdersProductCreateInput {
  product_title: String
  product_quantity: Int
  product_price: String
  products_tax: String
  products_final_price: String
}

input OrdersProductsCreateInput {
  data: OrdersProductCreateInput
}

"""
 A keystone list
"""
type Category {
  id: ID!
  name: String
  num_of_products: Int
  image: ImageFieldOutput
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  description: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  num_of_products: Int
  num_of_products_not: Int
  num_of_products_lt: Int
  num_of_products_lte: Int
  num_of_products_gt: Int
  num_of_products_gte: Int
  num_of_products_in: [Int]
  num_of_products_not_in: [Int]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """
   condition must be true for all nodes
  """
  products_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  products_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  products_none: ProductWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

enum SortCategoriesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  num_of_products_ASC
  num_of_products_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  description_ASC
  description_DESC
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  num_of_products: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  description: OrderDirection
}

input CategoryUpdateInput {
  name: String
  num_of_products: Int
  image: ImageFieldInput
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  description: String
  products: ProductRelateToManyInput
}

input CategoriesUpdateInput {
  id: ID!
  data: CategoryUpdateInput
}

input CategoryCreateInput {
  name: String
  num_of_products: Int
  image: ImageFieldInput
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  description: String
  products: ProductRelateToManyInput
}

input CategoriesCreateInput {
  data: CategoryCreateInput
}

"""
 A keystone list
"""
type Notification {
  id: ID!
  notification: String
  customer: User
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  is_seen: String
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  notification: String
  notification_not: String
  notification_contains: String
  notification_not_contains: String
  notification_starts_with: String
  notification_not_starts_with: String
  notification_ends_with: String
  notification_not_ends_with: String
  notification_i: String
  notification_not_i: String
  notification_contains_i: String
  notification_not_contains_i: String
  notification_starts_with_i: String
  notification_not_starts_with_i: String
  notification_ends_with_i: String
  notification_not_ends_with_i: String
  notification_in: [String]
  notification_not_in: [String]
  customer: UserWhereInput
  customer_is_null: Boolean
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  is_seen: String
  is_seen_not: String
  is_seen_contains: String
  is_seen_not_contains: String
  is_seen_starts_with: String
  is_seen_not_starts_with: String
  is_seen_ends_with: String
  is_seen_not_ends_with: String
  is_seen_i: String
  is_seen_not_i: String
  is_seen_contains_i: String
  is_seen_not_contains_i: String
  is_seen_starts_with_i: String
  is_seen_not_starts_with_i: String
  is_seen_ends_with_i: String
  is_seen_not_ends_with_i: String
  is_seen_in: [String]
  is_seen_not_in: [String]
}

input NotificationWhereUniqueInput {
  id: ID
}

enum SortNotificationsBy {
  id_ASC
  id_DESC
  notification_ASC
  notification_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  is_seen_ASC
  is_seen_DESC
}

input NotificationOrderByInput {
  id: OrderDirection
  notification: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  is_seen: OrderDirection
}

input NotificationUpdateInput {
  notification: String
  customer: UserRelateToOneInput
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  is_seen: String
}

input NotificationsUpdateInput {
  id: ID!
  data: NotificationUpdateInput
}

input NotificationCreateInput {
  notification: String
  customer: UserRelateToOneInput
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  is_seen: String
}

input NotificationsCreateInput {
  data: NotificationCreateInput
}

"""
 A keystone list
"""
type Tax {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  tax_name: String
  tax_rate: String
  tax_description: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

input TaxWhereInput {
  AND: [TaxWhereInput!]
  OR: [TaxWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  tax_name: String
  tax_name_not: String
  tax_name_contains: String
  tax_name_not_contains: String
  tax_name_starts_with: String
  tax_name_not_starts_with: String
  tax_name_ends_with: String
  tax_name_not_ends_with: String
  tax_name_i: String
  tax_name_not_i: String
  tax_name_contains_i: String
  tax_name_not_contains_i: String
  tax_name_starts_with_i: String
  tax_name_not_starts_with_i: String
  tax_name_ends_with_i: String
  tax_name_not_ends_with_i: String
  tax_name_in: [String]
  tax_name_not_in: [String]
  tax_rate: String
  tax_rate_not: String
  tax_rate_lt: String
  tax_rate_lte: String
  tax_rate_gt: String
  tax_rate_gte: String
  tax_description: String
  tax_description_not: String
  tax_description_contains: String
  tax_description_not_contains: String
  tax_description_starts_with: String
  tax_description_not_starts_with: String
  tax_description_ends_with: String
  tax_description_not_ends_with: String
  tax_description_i: String
  tax_description_not_i: String
  tax_description_contains_i: String
  tax_description_not_contains_i: String
  tax_description_starts_with_i: String
  tax_description_not_starts_with_i: String
  tax_description_ends_with_i: String
  tax_description_not_ends_with_i: String
  tax_description_in: [String]
  tax_description_not_in: [String]

  """
   condition must be true for all nodes
  """
  products_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  products_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  products_none: ProductWhereInput
}

input TaxWhereUniqueInput {
  id: ID
}

enum SortTaxesBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  tax_name_ASC
  tax_name_DESC
  tax_rate_ASC
  tax_rate_DESC
  tax_description_ASC
  tax_description_DESC
}

input TaxOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  tax_name: OrderDirection
  tax_rate: OrderDirection
  tax_description: OrderDirection
}

input TaxUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  tax_name: String
  tax_rate: String
  tax_description: String
  products: ProductRelateToManyInput
}

input TaxesUpdateInput {
  id: ID!
  data: TaxUpdateInput
}

input TaxCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  tax_name: String
  tax_rate: String
  tax_description: String
  products: ProductRelateToManyInput
}

input TaxesCreateInput {
  data: TaxCreateInput
}

"""
 A keystone list
"""
type Discount {
  id: ID!
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  discount_name: String
  discount_value: String
  discount_description: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  created_at: String
  created_at_not: String
  created_at_lt: String
  created_at_lte: String
  created_at_gt: String
  created_at_gte: String
  created_at_in: [String]
  created_at_not_in: [String]
  updated_at: String
  updated_at_not: String
  updated_at_lt: String
  updated_at_lte: String
  updated_at_gt: String
  updated_at_gte: String
  updated_at_in: [String]
  updated_at_not_in: [String]
  deleted_at: String
  deleted_at_not: String
  deleted_at_lt: String
  deleted_at_lte: String
  deleted_at_gt: String
  deleted_at_gte: String
  deleted_at_in: [String]
  deleted_at_not_in: [String]
  is_deleted: String
  is_deleted_not: String
  is_deleted_contains: String
  is_deleted_not_contains: String
  is_deleted_starts_with: String
  is_deleted_not_starts_with: String
  is_deleted_ends_with: String
  is_deleted_not_ends_with: String
  is_deleted_i: String
  is_deleted_not_i: String
  is_deleted_contains_i: String
  is_deleted_not_contains_i: String
  is_deleted_starts_with_i: String
  is_deleted_not_starts_with_i: String
  is_deleted_ends_with_i: String
  is_deleted_not_ends_with_i: String
  is_deleted_in: [String]
  is_deleted_not_in: [String]
  discount_name: String
  discount_name_not: String
  discount_name_contains: String
  discount_name_not_contains: String
  discount_name_starts_with: String
  discount_name_not_starts_with: String
  discount_name_ends_with: String
  discount_name_not_ends_with: String
  discount_name_i: String
  discount_name_not_i: String
  discount_name_contains_i: String
  discount_name_not_contains_i: String
  discount_name_starts_with_i: String
  discount_name_not_starts_with_i: String
  discount_name_ends_with_i: String
  discount_name_not_ends_with_i: String
  discount_name_in: [String]
  discount_name_not_in: [String]
  discount_value: String
  discount_value_not: String
  discount_value_lt: String
  discount_value_lte: String
  discount_value_gt: String
  discount_value_gte: String
  discount_description: String
  discount_description_not: String
  discount_description_contains: String
  discount_description_not_contains: String
  discount_description_starts_with: String
  discount_description_not_starts_with: String
  discount_description_ends_with: String
  discount_description_not_ends_with: String
  discount_description_i: String
  discount_description_not_i: String
  discount_description_contains_i: String
  discount_description_not_contains_i: String
  discount_description_starts_with_i: String
  discount_description_not_starts_with_i: String
  discount_description_ends_with_i: String
  discount_description_not_ends_with_i: String
  discount_description_in: [String]
  discount_description_not_in: [String]

  """
   condition must be true for all nodes
  """
  products_every: ProductWhereInput

  """
   condition must be true for at least 1 node
  """
  products_some: ProductWhereInput

  """
   condition must be false for all nodes
  """
  products_none: ProductWhereInput
}

input DiscountWhereUniqueInput {
  id: ID
}

enum SortDiscountsBy {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  deleted_at_ASC
  deleted_at_DESC
  is_deleted_ASC
  is_deleted_DESC
  discount_name_ASC
  discount_name_DESC
  discount_value_ASC
  discount_value_DESC
  discount_description_ASC
  discount_description_DESC
}

input DiscountOrderByInput {
  id: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
  deleted_at: OrderDirection
  is_deleted: OrderDirection
  discount_name: OrderDirection
  discount_value: OrderDirection
  discount_description: OrderDirection
}

input DiscountUpdateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  discount_name: String
  discount_value: String
  discount_description: String
  products: ProductRelateToManyInput
}

input DiscountsUpdateInput {
  id: ID!
  data: DiscountUpdateInput
}

input DiscountCreateInput {
  created_at: String
  updated_at: String
  deleted_at: String
  is_deleted: String
  discount_name: String
  discount_value: String
  discount_description: String
  products: ProductRelateToManyInput
}

input DiscountsCreateInput {
  data: DiscountCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Post item.
  """
  createPost(data: PostCreateInput): Post

  """
   Create multiple Post items.
  """
  createPosts(data: [PostsCreateInput]): [Post]

  """
   Update a single Post item by ID.
  """
  updatePost(id: ID!, data: PostUpdateInput): Post

  """
   Update multiple Post items by ID.
  """
  updatePosts(data: [PostsUpdateInput]): [Post]

  """
   Delete a single Post item by ID.
  """
  deletePost(id: ID!): Post

  """
   Delete multiple Post items by ID.
  """
  deletePosts(ids: [ID!]): [Post]

  """
   Create a single Product item.
  """
  createProduct(data: ProductCreateInput): Product

  """
   Create multiple Product items.
  """
  createProducts(data: [ProductsCreateInput]): [Product]

  """
   Update a single Product item by ID.
  """
  updateProduct(id: ID!, data: ProductUpdateInput): Product

  """
   Update multiple Product items by ID.
  """
  updateProducts(data: [ProductsUpdateInput]): [Product]

  """
   Delete a single Product item by ID.
  """
  deleteProduct(id: ID!): Product

  """
   Delete multiple Product items by ID.
  """
  deleteProducts(ids: [ID!]): [Product]

  """
   Create a single Tag item.
  """
  createTag(data: TagCreateInput): Tag

  """
   Create multiple Tag items.
  """
  createTags(data: [TagsCreateInput]): [Tag]

  """
   Update a single Tag item by ID.
  """
  updateTag(id: ID!, data: TagUpdateInput): Tag

  """
   Update multiple Tag items by ID.
  """
  updateTags(data: [TagsUpdateInput]): [Tag]

  """
   Delete a single Tag item by ID.
  """
  deleteTag(id: ID!): Tag

  """
   Delete multiple Tag items by ID.
  """
  deleteTags(ids: [ID!]): [Tag]

  """
   Create a single Review item.
  """
  createReview(data: ReviewCreateInput): Review

  """
   Create multiple Review items.
  """
  createReviews(data: [ReviewsCreateInput]): [Review]

  """
   Update a single Review item by ID.
  """
  updateReview(id: ID!, data: ReviewUpdateInput): Review

  """
   Update multiple Review items by ID.
  """
  updateReviews(data: [ReviewsUpdateInput]): [Review]

  """
   Delete a single Review item by ID.
  """
  deleteReview(id: ID!): Review

  """
   Delete multiple Review items by ID.
  """
  deleteReviews(ids: [ID!]): [Review]

  """
   Create a single Manufacturer item.
  """
  createManufacturer(data: ManufacturerCreateInput): Manufacturer

  """
   Create multiple Manufacturer items.
  """
  createManufacturers(data: [ManufacturersCreateInput]): [Manufacturer]

  """
   Update a single Manufacturer item by ID.
  """
  updateManufacturer(id: ID!, data: ManufacturerUpdateInput): Manufacturer

  """
   Update multiple Manufacturer items by ID.
  """
  updateManufacturers(data: [ManufacturersUpdateInput]): [Manufacturer]

  """
   Delete a single Manufacturer item by ID.
  """
  deleteManufacturer(id: ID!): Manufacturer

  """
   Delete multiple Manufacturer items by ID.
  """
  deleteManufacturers(ids: [ID!]): [Manufacturer]

  """
   Create a single Order item.
  """
  createOrder(data: OrderCreateInput): Order

  """
   Create multiple Order items.
  """
  createOrders(data: [OrdersCreateInput]): [Order]

  """
   Update a single Order item by ID.
  """
  updateOrder(id: ID!, data: OrderUpdateInput): Order

  """
   Update multiple Order items by ID.
  """
  updateOrders(data: [OrdersUpdateInput]): [Order]

  """
   Delete a single Order item by ID.
  """
  deleteOrder(id: ID!): Order

  """
   Delete multiple Order items by ID.
  """
  deleteOrders(ids: [ID!]): [Order]

  """
   Create a single OrdersProduct item.
  """
  createOrdersProduct(data: OrdersProductCreateInput): OrdersProduct

  """
   Create multiple OrdersProduct items.
  """
  createOrdersProducts(data: [OrdersProductsCreateInput]): [OrdersProduct]

  """
   Update a single OrdersProduct item by ID.
  """
  updateOrdersProduct(id: ID!, data: OrdersProductUpdateInput): OrdersProduct

  """
   Update multiple OrdersProduct items by ID.
  """
  updateOrdersProducts(data: [OrdersProductsUpdateInput]): [OrdersProduct]

  """
   Delete a single OrdersProduct item by ID.
  """
  deleteOrdersProduct(id: ID!): OrdersProduct

  """
   Delete multiple OrdersProduct items by ID.
  """
  deleteOrdersProducts(ids: [ID!]): [OrdersProduct]

  """
   Create a single Category item.
  """
  createCategory(data: CategoryCreateInput): Category

  """
   Create multiple Category items.
  """
  createCategories(data: [CategoriesCreateInput]): [Category]

  """
   Update a single Category item by ID.
  """
  updateCategory(id: ID!, data: CategoryUpdateInput): Category

  """
   Update multiple Category items by ID.
  """
  updateCategories(data: [CategoriesUpdateInput]): [Category]

  """
   Delete a single Category item by ID.
  """
  deleteCategory(id: ID!): Category

  """
   Delete multiple Category items by ID.
  """
  deleteCategories(ids: [ID!]): [Category]

  """
   Create a single Notification item.
  """
  createNotification(data: NotificationCreateInput): Notification

  """
   Create multiple Notification items.
  """
  createNotifications(data: [NotificationsCreateInput]): [Notification]

  """
   Update a single Notification item by ID.
  """
  updateNotification(id: ID!, data: NotificationUpdateInput): Notification

  """
   Update multiple Notification items by ID.
  """
  updateNotifications(data: [NotificationsUpdateInput]): [Notification]

  """
   Delete a single Notification item by ID.
  """
  deleteNotification(id: ID!): Notification

  """
   Delete multiple Notification items by ID.
  """
  deleteNotifications(ids: [ID!]): [Notification]

  """
   Create a single Tax item.
  """
  createTax(data: TaxCreateInput): Tax

  """
   Create multiple Tax items.
  """
  createTaxes(data: [TaxesCreateInput]): [Tax]

  """
   Update a single Tax item by ID.
  """
  updateTax(id: ID!, data: TaxUpdateInput): Tax

  """
   Update multiple Tax items by ID.
  """
  updateTaxes(data: [TaxesUpdateInput]): [Tax]

  """
   Delete a single Tax item by ID.
  """
  deleteTax(id: ID!): Tax

  """
   Delete multiple Tax items by ID.
  """
  deleteTaxes(ids: [ID!]): [Tax]

  """
   Create a single Discount item.
  """
  createDiscount(data: DiscountCreateInput): Discount

  """
   Create multiple Discount items.
  """
  createDiscounts(data: [DiscountsCreateInput]): [Discount]

  """
   Update a single Discount item by ID.
  """
  updateDiscount(id: ID!, data: DiscountUpdateInput): Discount

  """
   Update multiple Discount items by ID.
  """
  updateDiscounts(data: [DiscountsUpdateInput]): [Discount]

  """
   Delete a single Discount item by ID.
  """
  deleteDiscount(id: ID!): Discount

  """
   Delete multiple Discount items by ID.
  """
  deleteDiscounts(ids: [ID!]): [Discount]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]

  """
   Search for the Post item with the matching ID.
  """
  Post(where: PostWhereUniqueInput!): Post

  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int

  """
   Search for all Product items which match the where clause.
  """
  allProducts(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]

  """
   Search for the Product item with the matching ID.
  """
  Product(where: ProductWhereUniqueInput!): Product

  """
   Perform a meta-query on all Product items which match the where clause.
  """
  _allProductsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int

  """
   Search for all Tag items which match the where clause.
  """
  allTags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]

  """
   Search for the Tag item with the matching ID.
  """
  Tag(where: TagWhereUniqueInput!): Tag

  """
   Perform a meta-query on all Tag items which match the where clause.
  """
  _allTagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int

  """
   Search for all Review items which match the where clause.
  """
  allReviews(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Review!]

  """
   Search for the Review item with the matching ID.
  """
  Review(where: ReviewWhereUniqueInput!): Review

  """
   Perform a meta-query on all Review items which match the where clause.
  """
  _allReviewsMeta(
    where: ReviewWhereInput! = {}
    search: String
    sortBy: [SortReviewsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ReviewOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use reviewsCount instead."
    )
  reviewsCount(where: ReviewWhereInput! = {}): Int

  """
   Search for all Manufacturer items which match the where clause.
  """
  allManufacturers(
    where: ManufacturerWhereInput! = {}
    search: String
    sortBy: [SortManufacturersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ManufacturerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Manufacturer!]

  """
   Search for the Manufacturer item with the matching ID.
  """
  Manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer

  """
   Perform a meta-query on all Manufacturer items which match the where clause.
  """
  _allManufacturersMeta(
    where: ManufacturerWhereInput! = {}
    search: String
    sortBy: [SortManufacturersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ManufacturerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use manufacturersCount instead."
    )
  manufacturersCount(where: ManufacturerWhereInput! = {}): Int

  """
   Search for all Order items which match the where clause.
  """
  allOrders(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Order!]

  """
   Search for the Order item with the matching ID.
  """
  Order(where: OrderWhereUniqueInput!): Order

  """
   Perform a meta-query on all Order items which match the where clause.
  """
  _allOrdersMeta(
    where: OrderWhereInput! = {}
    search: String
    sortBy: [SortOrdersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrderOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ordersCount instead."
    )
  ordersCount(where: OrderWhereInput! = {}): Int

  """
   Search for all OrdersProduct items which match the where clause.
  """
  allOrdersProducts(
    where: OrdersProductWhereInput! = {}
    search: String
    sortBy: [SortOrdersProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrdersProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [OrdersProduct!]

  """
   Search for the OrdersProduct item with the matching ID.
  """
  OrdersProduct(where: OrdersProductWhereUniqueInput!): OrdersProduct

  """
   Perform a meta-query on all OrdersProduct items which match the where clause.
  """
  _allOrdersProductsMeta(
    where: OrdersProductWhereInput! = {}
    search: String
    sortBy: [SortOrdersProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [OrdersProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use ordersProductsCount instead."
    )
  ordersProductsCount(where: OrdersProductWhereInput! = {}): Int

  """
   Search for all Category items which match the where clause.
  """
  allCategories(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Category!]

  """
   Search for the Category item with the matching ID.
  """
  Category(where: CategoryWhereUniqueInput!): Category

  """
   Perform a meta-query on all Category items which match the where clause.
  """
  _allCategoriesMeta(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use categoriesCount instead."
    )
  categoriesCount(where: CategoryWhereInput! = {}): Int

  """
   Search for all Notification items which match the where clause.
  """
  allNotifications(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Notification!]

  """
   Search for the Notification item with the matching ID.
  """
  Notification(where: NotificationWhereUniqueInput!): Notification

  """
   Perform a meta-query on all Notification items which match the where clause.
  """
  _allNotificationsMeta(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use notificationsCount instead."
    )
  notificationsCount(where: NotificationWhereInput! = {}): Int

  """
   Search for all Tax items which match the where clause.
  """
  allTaxes(
    where: TaxWhereInput! = {}
    search: String
    sortBy: [SortTaxesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaxOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tax!]

  """
   Search for the Tax item with the matching ID.
  """
  Tax(where: TaxWhereUniqueInput!): Tax

  """
   Perform a meta-query on all Tax items which match the where clause.
  """
  _allTaxesMeta(
    where: TaxWhereInput! = {}
    search: String
    sortBy: [SortTaxesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaxOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use taxesCount instead."
    )
  taxesCount(where: TaxWhereInput! = {}): Int

  """
   Search for all Discount items which match the where clause.
  """
  allDiscounts(
    where: DiscountWhereInput! = {}
    search: String
    sortBy: [SortDiscountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [DiscountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Discount!]

  """
   Search for the Discount item with the matching ID.
  """
  Discount(where: DiscountWhereUniqueInput!): Discount

  """
   Perform a meta-query on all Discount items which match the where clause.
  """
  _allDiscountsMeta(
    where: DiscountWhereInput! = {}
    search: String
    sortBy: [SortDiscountsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [DiscountOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use discountsCount instead."
    )
  discountsCount(where: DiscountWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
