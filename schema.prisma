datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      Int            @id @default(autoincrement())
  name                    String?
  email                   String?        @unique
  password                String?
  posts                   Post[]         @relation("Post_author")
  reviews                 Review[]       @relation("Review_customer")
  orders                  Order[]        @relation("Order_customer")
  profile_image_filesize  Int?
  profile_image_extension String?
  profile_image_width     Int?
  profile_image_height    Int?
  profile_image_mode      String?
  profile_image_id        String?
  notifications           Notification[] @relation("Notification_customer")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String?
  status      String?
  content     Json?
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    Int?      @map("author")

  @@index([authorId])
}

model Product {
  id              Int           @id @default(autoincrement())
  title           String?
  description     String?
  price           Decimal?      @postgresql.Decimal(18, 4)
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  status          String?
  quantitiy       Int?
  manufacturer    Manufacturer? @relation("Product_manufacturer", fields: [manufacturerId], references: [id])
  manufacturerId  Int?          @map("manufacturer")
  products_orderd Int?
  reviews         Review[]      @relation("Review_product")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  discount        Int?
  rating          Int?
  category        Category?     @relation("Product_category", fields: [categoryId], references: [id])
  categoryId      Int?          @map("category")
  tags            Tag[]         @relation("Product_tags_Tag_products")

  @@index([manufacturerId])
  @@index([categoryId])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String?
  products Product[] @relation("Product_tags_Tag_products")
}

model Review {
  id          Int       @id @default(autoincrement())
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  is_deleted  String?
  review_text String?
  product     Product?  @relation("Review_product", fields: [productId], references: [id])
  productId   Int?      @map("product")
  customer    User?     @relation("Review_customer", fields: [customerId], references: [id])
  customerId  Int?      @map("customer")

  @@index([productId])
  @@index([customerId])
}

model Manufacturer {
  id              Int       @id @default(autoincrement())
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  name            String?
  products        Product[] @relation("Product_manufacturer")
}

model Order {
  id                      Int             @id @default(autoincrement())
  created_at              DateTime?
  updated_at              DateTime?
  deleted_at              DateTime?
  is_deleted              String?
  order_total             Float?
  billing_postcode        String?
  billing_city            String?
  billing_country         String?
  delivery_street_address String?
  delivery_name           String?
  currency                String?
  status                  String?
  customer                User?           @relation("Order_customer", fields: [customerId], references: [id])
  customerId              Int?            @map("customer")
  orders_product          OrdersProduct[] @relation("Order_orders_product_many")

  @@index([customerId])
}

model OrdersProduct {
  id                        Int      @id @default(autoincrement())
  product_title             String?
  product_quantity          Int?
  product_price             Decimal? @postgresql.Decimal(18, 4)
  products_tax              Decimal? @postgresql.Decimal(18, 4)
  products_final_price      Decimal? @postgresql.Decimal(18, 4)
  from_Order_orders_product Order[]  @relation("Order_orders_product_many")
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String?
  num_of_products Int?
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  description     String?
  products        Product[] @relation("Product_category")
}

model Notification {
  id           Int     @id @default(autoincrement())
  notification String?
  customer     User?   @relation("Notification_customer", fields: [customerId], references: [id])
  customerId   Int?    @map("customer")
  is_seen      String?

  @@index([customerId])
}