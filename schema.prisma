datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                           Int             @id @default(autoincrement())
  name                         String?
  email                        String?         @unique
  password                     String?
  address                      Address?        @relation("Address_user")
  phone                        String?
  posts                        Post[]          @relation("Post_author")
  reviews                      Review[]        @relation("Review_customer")
  orders                       Order[]         @relation("Order_customer")
  profile_image_filesize       Int?
  profile_image_extension      String?
  profile_image_width          Int?
  profile_image_height         Int?
  profile_image_mode           String?
  profile_image_id             String?
  notifications                Notification[]  @relation("Notification_customer")
  from_PaymentMethod_customers PaymentMethod[] @relation("PaymentMethod_customers_many")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String?
  status      String?
  content     Json?
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    Int?      @map("author")

  @@index([authorId])
}

model Product {
  id              Int           @id @default(autoincrement())
  title           String?
  description     String?
  price           Decimal?      @postgresql.Decimal(18, 4)
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  status          String?
  quantitiy       Int?
  manufacturer    Manufacturer? @relation("Product_manufacturer", fields: [manufacturerId], references: [id])
  manufacturerId  Int?          @map("manufacturer")
  products_orderd Int?
  reviews         Review[]      @relation("Review_product")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  is_discounted   String?
  discount        Discount[]    @relation("Discount_products_Product_discount")
  is_taxed        String?
  tax             Tax[]         @relation("Product_tax_Tax_products")
  rating          Int?
  category        Category?     @relation("Product_category", fields: [categoryId], references: [id])
  categoryId      Int?          @map("category")
  tags            Tag[]         @relation("Product_tags_Tag_products")
  product_type    ProductType?  @relation("Product_product_type", fields: [product_typeId], references: [id])
  product_typeId  Int?          @map("product_type")

  @@index([manufacturerId])
  @@index([categoryId])
  @@index([product_typeId])
}

model Tag {
  id         Int       @id @default(autoincrement())
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?
  is_deleted String?
  name       String?
  products   Product[] @relation("Product_tags_Tag_products")
}

model Review {
  id          Int       @id @default(autoincrement())
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  is_deleted  String?
  review_text String?
  product     Product?  @relation("Review_product", fields: [productId], references: [id])
  productId   Int?      @map("product")
  customer    User?     @relation("Review_customer", fields: [customerId], references: [id])
  customerId  Int?      @map("customer")

  @@index([productId])
  @@index([customerId])
}

model Manufacturer {
  id              Int       @id @default(autoincrement())
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  name            String?
  products        Product[] @relation("Product_manufacturer")
}

model Order {
  id                      Int             @id @default(autoincrement())
  created_at              DateTime?
  updated_at              DateTime?
  deleted_at              DateTime?
  is_deleted              String?
  order_total             Float?
  billing_postcode        String?
  billing_city            String?
  billing_country         String?
  delivery_street_address String?
  delivery_name           String?
  payment_method          PaymentMethod?  @relation("Order_payment_method", fields: [payment_methodId], references: [id])
  payment_methodId        Int?            @map("payment_method")
  status                  String?
  customer                User?           @relation("Order_customer", fields: [customerId], references: [id])
  customerId              Int?            @map("customer")
  orders_product          OrdersProduct[] @relation("Order_orders_product_many")

  @@index([payment_methodId])
  @@index([customerId])
}

model OrdersProduct {
  id                        Int      @id @default(autoincrement())
  product_title             String?
  product_quantity          Int?
  product_price             Decimal? @postgresql.Decimal(18, 4)
  products_tax              Decimal? @postgresql.Decimal(18, 4)
  products_final_price      Decimal? @postgresql.Decimal(18, 4)
  from_Order_orders_product Order[]  @relation("Order_orders_product_many")
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String?
  num_of_products Int?
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_mode      String?
  image_id        String?
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  description     String?
  products        Product[] @relation("Product_category")
}

model Notification {
  id           Int       @id @default(autoincrement())
  notification String?
  customer     User?     @relation("Notification_customer", fields: [customerId], references: [id])
  customerId   Int?      @map("customer")
  created_at   DateTime?
  updated_at   DateTime?
  deleted_at   DateTime?
  is_deleted   String?
  is_seen      String?

  @@index([customerId])
}

model Tax {
  id              Int       @id @default(autoincrement())
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  is_deleted      String?
  tax_name        String?
  tax_rate        Decimal?  @postgresql.Decimal(18, 4)
  tax_description String?
  products        Product[] @relation("Product_tax_Tax_products")
}

model Discount {
  id                   Int       @id @default(autoincrement())
  created_at           DateTime?
  updated_at           DateTime?
  deleted_at           DateTime?
  is_deleted           String?
  discount_name        String?
  discount_value       Decimal?  @postgresql.Decimal(18, 4)
  discount_description String?
  products             Product[] @relation("Discount_products_Product_discount")
}

model ProductType {
  id                                     Int                    @id @default(autoincrement())
  created_at                             DateTime?
  updated_at                             DateTime?
  deleted_at                             DateTime?
  is_deleted                             String?
  product_type                           String?
  product_type_attributes                ProductTypeAttribute[] @relation("ProductType_product_type_attributes_many")
  products                               Product[]              @relation("Product_product_type")
  from_ProductTypeAttribute_product_type ProductTypeAttribute[] @relation("ProductTypeAttribute_product_type_many")
}

model ProductAttribute {
  id                                   Int                    @id @default(autoincrement())
  created_at                           DateTime?
  updated_at                           DateTime?
  deleted_at                           DateTime?
  is_deleted                           String?
  size                                 String?
  material                             String?
  color                                String?
  dimensions                           String?
  weight                               Decimal?               @postgresql.Decimal(18, 4)
  packaging                            String?
  design                               String?
  attribute_type                       AttributeType?         @relation("ProductAttribute_attribute_type", fields: [attribute_typeId], references: [id])
  attribute_typeId                     Int?                   @map("attribute_type")
  from_AttributeType_attribute_value   AttributeType[]        @relation("AttributeType_attribute_value_many")
  from_ProductTypeAttribute_attributes ProductTypeAttribute[] @relation("ProductTypeAttribute_attributes_many")

  @@index([attribute_typeId])
}

model AttributeType {
  id                                   Int                @id @default(autoincrement())
  created_at                           DateTime?
  updated_at                           DateTime?
  deleted_at                           DateTime?
  is_deleted                           String?
  attribute_value                      ProductAttribute[] @relation("AttributeType_attribute_value_many")
  attribute_type                       String?
  from_ProductAttribute_attribute_type ProductAttribute[] @relation("ProductAttribute_attribute_type")
}

model ProductTypeAttribute {
  id                                       Int                @id @default(autoincrement())
  created_at                               DateTime?
  updated_at                               DateTime?
  deleted_at                               DateTime?
  is_deleted                               String?
  product_type                             ProductType[]      @relation("ProductTypeAttribute_product_type_many")
  attributes                               ProductAttribute[] @relation("ProductTypeAttribute_attributes_many")
  from_ProductType_product_type_attributes ProductType[]      @relation("ProductType_product_type_attributes_many")
}

model PaymentMethod {
  id             Int       @id @default(autoincrement())
  created_at     DateTime?
  updated_at     DateTime?
  deleted_at     DateTime?
  is_deleted     String?
  payment_method String?
  customers      User[]    @relation("PaymentMethod_customers_many")
  orders         Order[]   @relation("Order_payment_method")
  currency       String?
}

model Address {
  id          Int       @id @default(autoincrement())
  postal_code Int?
  street      String?
  city        String?
  country     String?
  user        User?     @relation("Address_user", fields: [userId], references: [id])
  userId      Int?      @unique @map("user")
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  is_deleted  String?
}